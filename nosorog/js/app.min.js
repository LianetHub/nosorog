/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n\r\n\r\n    const isMobile = {\r\n        Android: function () {\r\n            return navigator.userAgent.match(/Android/i);\r\n        },\r\n        BlackBerry: function () {\r\n            return navigator.userAgent.match(/BlackBerry/i);\r\n        },\r\n        iOS: function () {\r\n            return navigator.userAgent.match(/iPhone|iPad|iPod/i);\r\n        },\r\n        Opera: function () {\r\n            return navigator.userAgent.match(/Opera Mini/i);\r\n        },\r\n        Windows: function () {\r\n            return navigator.userAgent.match(/IEMobile/i);\r\n        },\r\n        any: function () {\r\n            return (\r\n                isMobile.Android() ||\r\n                isMobile.BlackBerry() ||\r\n                isMobile.iOS() ||\r\n                isMobile.Opera() ||\r\n                isMobile.Windows());\r\n        },\r\n    };\r\n\r\n    function getNavigator() {\r\n        if (isMobile.any() || window.innerWidth < 992) {\r\n            document.body.classList.remove(\"_pc\");\r\n            document.body.classList.add(\"_touch\");\r\n        } else {\r\n            document.body.classList.remove(\"_touch\");\r\n            document.body.classList.add(\"_pc\");\r\n        }\r\n    }\r\n\r\n    getNavigator();\r\n\r\n    window.addEventListener('resize', () => {\r\n        getNavigator()\r\n    });\r\n\r\n\r\n    var phoneInputs = document.querySelectorAll('input[type=\"tel\"]');\r\n\r\n    var getInputNumbersValue = function (input) {\r\n        // Return stripped input value — just numbers\r\n        return input.value.replace(/\\D/g, '');\r\n    }\r\n\r\n    var onPhonePaste = function (e) {\r\n        var input = e.target,\r\n            inputNumbersValue = getInputNumbersValue(input);\r\n        var pasted = e.clipboardData || window.clipboardData;\r\n        if (pasted) {\r\n            var pastedText = pasted.getData('Text');\r\n            if (/\\D/g.test(pastedText)) {\r\n                // Attempt to paste non-numeric symbol — remove all non-numeric symbols,\r\n                // formatting will be in onPhoneInput handler\r\n                input.value = inputNumbersValue;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    var onPhoneInput = function (e) {\r\n        var input = e.target,\r\n            inputNumbersValue = getInputNumbersValue(input),\r\n            selectionStart = input.selectionStart,\r\n            formattedInputValue = \"\";\r\n\r\n        if (!inputNumbersValue) {\r\n            return input.value = \"\";\r\n        }\r\n\r\n        if (input.value.length != selectionStart) {\r\n            // Editing in the middle of input, not last symbol\r\n            if (e.data && /\\D/g.test(e.data)) {\r\n                // Attempt to input non-numeric symbol\r\n                input.value = inputNumbersValue;\r\n            }\r\n            return;\r\n        }\r\n\r\n        if ([\"7\", \"8\", \"9\"].indexOf(inputNumbersValue[0]) > -1) {\r\n            if (inputNumbersValue[0] == \"9\") inputNumbersValue = \"7\" + inputNumbersValue;\r\n            var firstSymbols = (inputNumbersValue[0] == \"8\") ? \"8\" : \"+7\";\r\n            formattedInputValue = input.value = firstSymbols + \" \";\r\n            if (inputNumbersValue.length > 1) {\r\n                formattedInputValue += '(' + inputNumbersValue.substring(1, 4);\r\n            }\r\n            if (inputNumbersValue.length >= 5) {\r\n                formattedInputValue += ') ' + inputNumbersValue.substring(4, 7);\r\n            }\r\n            if (inputNumbersValue.length >= 8) {\r\n                formattedInputValue += '-' + inputNumbersValue.substring(7, 9);\r\n            }\r\n            if (inputNumbersValue.length >= 10) {\r\n                formattedInputValue += '-' + inputNumbersValue.substring(9, 11);\r\n            }\r\n        } else {\r\n            formattedInputValue = '+' + inputNumbersValue.substring(0, 16);\r\n        }\r\n        input.value = formattedInputValue;\r\n    }\r\n    var onPhoneKeyDown = function (e) {\r\n        // Clear input after remove last symbol\r\n        var inputValue = e.target.value.replace(/\\D/g, '');\r\n        if (e.keyCode == 8 && inputValue.length == 1) {\r\n            e.target.value = \"\";\r\n        }\r\n    }\r\n    for (var phoneInput of phoneInputs) {\r\n        phoneInput.addEventListener('keydown', onPhoneKeyDown);\r\n        phoneInput.addEventListener('input', onPhoneInput, false);\r\n        phoneInput.addEventListener('paste', onPhonePaste, false);\r\n    }\r\n\r\n\r\n    const spollersArray = document.querySelectorAll(\"[data-spollers]\");\r\n    if (spollersArray.length > 0) {\r\n\r\n        const spollersRegular = Array.from(spollersArray).filter(function (\r\n            item,\r\n            index,\r\n            self\r\n        ) {\r\n            return !item.dataset.spollers.split(\",\")[0];\r\n        });\r\n\r\n        if (spollersRegular.length > 0) {\r\n            initSpollers(spollersRegular);\r\n        }\r\n\r\n        const spollersMedia = Array.from(spollersArray).filter(function (\r\n            item,\r\n            index,\r\n            self\r\n        ) {\r\n            return item.dataset.spollers.split(\",\")[0];\r\n        });\r\n\r\n        if (spollersMedia.length > 0) {\r\n            const breakpointsArray = [];\r\n            spollersMedia.forEach((item) => {\r\n                const params = item.dataset.spollers;\r\n                const breakpoint = {};\r\n                const paramsArray = params.split(\",\");\r\n                breakpoint.value = paramsArray[0];\r\n                breakpoint.type = paramsArray[1] ? paramsArray[1].trim() : \"max\";\r\n                breakpoint.item = item;\r\n                breakpointsArray.push(breakpoint);\r\n            });\r\n\r\n\r\n            let mediaQueries = breakpointsArray.map(function (item) {\r\n                return (\r\n                    \"(\" +\r\n                    item.type +\r\n                    \"-width: \" +\r\n                    item.value +\r\n                    \"px),\" +\r\n                    item.value +\r\n                    \",\" +\r\n                    item.type\r\n                );\r\n            });\r\n            mediaQueries = mediaQueries.filter(function (item, index, self) {\r\n                return self.indexOf(item) === index;\r\n            });\r\n\r\n\r\n            mediaQueries.forEach((breakpoint) => {\r\n                const paramsArray = breakpoint.split(\",\");\r\n                const mediaBreakpoint = paramsArray[1];\r\n                const mediaType = paramsArray[2];\r\n                const matchMedia = window.matchMedia(paramsArray[0]);\r\n\r\n                const spollersArray = breakpointsArray.filter(function (item) {\r\n                    if (item.value === mediaBreakpoint && item.type === mediaType) {\r\n                        return true;\r\n                    }\r\n                });\r\n\r\n                matchMedia.addListener(function () {\r\n                    initSpollers(spollersArray, matchMedia);\r\n                });\r\n                initSpollers(spollersArray, matchMedia);\r\n            });\r\n        }\r\n\r\n\r\n        function initSpollers(spollersArray, matchMedia = false) {\r\n            spollersArray.forEach((spollersBlock) => {\r\n                spollersBlock = matchMedia ? spollersBlock.item : spollersBlock;\r\n                if (matchMedia.matches || !matchMedia) {\r\n                    spollersBlock.classList.add(\"_init\");\r\n                    initSpollerBody(spollersBlock);\r\n                    spollersBlock.addEventListener(\"click\", setSpollerAction);\r\n                } else {\r\n                    spollersBlock.classList.remove(\"_init\");\r\n                    initSpollerBody(spollersBlock, false);\r\n                    spollersBlock.removeEventListener(\"click\", setSpollerAction);\r\n                }\r\n            });\r\n        }\r\n\r\n        function initSpollerBody(spollersBlock, hideSpollerBody = true) {\r\n            const spollerTitles = spollersBlock.querySelectorAll(\"[data-spoller]\");\r\n            if (spollerTitles.length > 0) {\r\n                spollerTitles.forEach((spollerTitle) => {\r\n                    if (hideSpollerBody) {\r\n                        spollerTitle.removeAttribute(\"tabindex\");\r\n                        if (!spollerTitle.classList.contains(\"_active\")) {\r\n                            spollerTitle.nextElementSibling.hidden = true;\r\n                        }\r\n                    } else {\r\n                        spollerTitle.setAttribute(\"tabindex\", \"-1\");\r\n                        spollerTitle.nextElementSibling.hidden = false;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        function setSpollerAction(e) {\r\n            const el = e.target;\r\n            if (el.hasAttribute(\"data-spoller\") || el.closest(\"[data-spoller]\")) {\r\n                const spollerTitle = el.hasAttribute(\"data-spoller\")\r\n                    ? el\r\n                    : el.closest(\"[data-spoller]\");\r\n                const spollersBlock = spollerTitle.closest(\"[data-spollers]\");\r\n                const oneSpoller = spollersBlock.hasAttribute(\"data-one-spoller\")\r\n                    ? true\r\n                    : false;\r\n                if (!spollersBlock.querySelectorAll(\"._slide\").length) {\r\n                    if (oneSpoller && !spollerTitle.classList.contains(\"_active\")) {\r\n                        hideSpollersBody(spollersBlock);\r\n                    }\r\n                    spollerTitle.classList.toggle(\"_active\");\r\n                    spollerTitle.nextElementSibling.slideToggle(300);\r\n                }\r\n                e.preventDefault();\r\n            }\r\n        }\r\n\r\n        function hideSpollersBody(spollersBlock) {\r\n            const spollerActiveTitle = spollersBlock.querySelector(\r\n                \"[data-spoller]._active\"\r\n            );\r\n            if (spollerActiveTitle) {\r\n                spollerActiveTitle.classList.remove(\"_active\");\r\n                spollerActiveTitle.nextElementSibling.slideUp(300);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // click handlers\r\n\r\n    document.addEventListener('click', (e) => {\r\n\r\n        const target = e.target;\r\n        const menu = document.querySelector('.header__menu');\r\n        const menuHeader = document.querySelector('.menu__header');\r\n        const menuLocation = document.querySelector('.menu__location');\r\n        const menuCaption = document.querySelector('.menu__caption');\r\n\r\n        if (target.closest('.icon-menu') || target.classList.contains('menu__close')) {\r\n            getMenu()\r\n        }\r\n\r\n        // Handle first-level menu toggling\r\n        if (target.classList.contains('menu__arrow')) {\r\n            let subMenu = target.nextElementSibling;\r\n            const activeMenuItemText = target.previousElementSibling ? target.previousElementSibling.textContent : '';\r\n\r\n            if (document.querySelector('.menu__arrow.active') !== target) {\r\n                if (document.querySelector('.submenu.open')) {\r\n                    document.querySelector('.submenu.open').classList.remove('open');\r\n                }\r\n                if (document.querySelector('.menu__arrow.active')) {\r\n                    document.querySelector('.menu__arrow.active').classList.remove('active');\r\n                }\r\n                if (document.querySelector('.subsubmenu.open')) {\r\n                    document.querySelector('.subsubmenu.open').classList.remove('open');\r\n                }\r\n                if (document.querySelector('.submenu__arrow.active')) {\r\n                    document.querySelector('.submenu__arrow.active').classList.remove('active');\r\n                }\r\n\r\n                toggleClassSafely(menu, 'second-menu-open', false);\r\n            }\r\n\r\n            if (subMenu) {\r\n                subMenu.classList.toggle('open');\r\n            }\r\n            target.classList.toggle('active');\r\n\r\n\r\n            if (subMenu && subMenu.classList.contains('open')) {\r\n                toggleClassSafely(menuHeader, 'hidden', false);\r\n                toggleClassSafely(menuLocation, 'hidden');\r\n                setTextContentSafely(menuCaption, activeMenuItemText);\r\n                toggleClassSafely(menu, 'first-menu-open');\r\n            } else {\r\n                toggleClassSafely(menuHeader, 'hidden');\r\n                toggleClassSafely(menuLocation, 'hidden', false);\r\n                setTextContentSafely(menuCaption, '');\r\n                toggleClassSafely(menu, 'first-menu-open', false);\r\n            }\r\n        }\r\n\r\n        // Handle second-level menu toggling\r\n        if (target.classList.contains('submenu__arrow')) {\r\n            let subsubMenu = target.nextElementSibling;\r\n            const activeSubMenuItemText = target.previousElementSibling ? target.previousElementSibling.textContent : '';\r\n\r\n            if (document.querySelector('.submenu__arrow.active') !== target) {\r\n                if (document.querySelector('.subsubmenu.open')) {\r\n                    document.querySelector('.subsubmenu.open').classList.remove('open');\r\n                }\r\n                if (document.querySelector('.submenu__arrow.active')) {\r\n                    document.querySelector('.submenu__arrow.active').classList.remove('active');\r\n                }\r\n            }\r\n\r\n            if (subsubMenu) {\r\n                subsubMenu.classList.toggle('open');\r\n            }\r\n            target.classList.toggle('active');\r\n\r\n\r\n            if (subsubMenu && subsubMenu.classList.contains('open')) {\r\n                setTextContentSafely(menuCaption, activeSubMenuItemText);\r\n                toggleClassSafely(menu, 'second-menu-open');\r\n            } else {\r\n\r\n                const parentMenuLink = target.closest('.submenu__item') ? target.closest('.submenu__item').querySelector('.submenu__link') : null;\r\n                if (parentMenuLink) {\r\n                    setTextContentSafely(menuCaption, parentMenuLink.textContent);\r\n                } else {\r\n\r\n                    const activeMenuArrow = document.querySelector('.menu__arrow.active');\r\n                    if (activeMenuArrow && activeMenuArrow.previousElementSibling) {\r\n                        setTextContentSafely(menuCaption, activeMenuArrow.previousElementSibling.textContent);\r\n                    }\r\n                }\r\n                toggleClassSafely(menu, 'second-menu-open', false);\r\n            }\r\n        }\r\n\r\n        // Handle the \"Back\" button click\r\n        if (target.classList.contains('menu__back')) {\r\n\r\n            const openSubSubmenu = document.querySelector('.subsubmenu.open');\r\n            if (openSubSubmenu) {\r\n                openSubSubmenu.classList.remove('open');\r\n                const activeSubmenuArrow = document.querySelector('.submenu__arrow.active');\r\n                if (activeSubmenuArrow) {\r\n                    activeSubmenuArrow.classList.remove('active');\r\n                }\r\n\r\n                const activeSubmenu = document.querySelector('.submenu.open');\r\n                if (activeSubmenu) {\r\n                    const parentMenuItemLink = activeSubmenu.closest('.menu__item') ? activeSubmenu.closest('.menu__item').querySelector('.menu__link') : null;\r\n                    setTextContentSafely(menuCaption, parentMenuItemLink ? parentMenuItemLink.textContent : '');\r\n                }\r\n                toggleClassSafely(menu, 'second-menu-open', false);\r\n            } else {\r\n\r\n                const openSubmenu = document.querySelector('.submenu.open');\r\n                if (openSubmenu) {\r\n                    openSubmenu.classList.remove('open');\r\n                    const activeMenuArrow = document.querySelector('.menu__arrow.active');\r\n                    if (activeMenuArrow) {\r\n                        activeMenuArrow.classList.remove('active');\r\n                    }\r\n                }\r\n\r\n\r\n                toggleClassSafely(menuHeader, 'hidden');\r\n                toggleClassSafely(menuLocation, 'hidden', false);\r\n                setTextContentSafely(menuCaption, '');\r\n                toggleClassSafely(menu, 'first-menu-open', false);\r\n            }\r\n        }\r\n\r\n\r\n    });\r\n\r\n    const toggleClassSafely = (element, className, add = true) => {\r\n        if (element) {\r\n            if (add) {\r\n                element.classList.add(className);\r\n            } else {\r\n                element.classList.remove(className);\r\n            }\r\n        }\r\n    };\r\n\r\n    const setTextContentSafely = (element, text) => {\r\n        if (element) {\r\n            element.textContent = text;\r\n        }\r\n    };\r\n\r\n    function getMenu() {\r\n        document.querySelector('.header').classList.toggle('open-menu');\r\n        toggleLocking();\r\n    }\r\n\r\n    function toggleLocking(lockClass) {\r\n\r\n        const body = document.body;\r\n        let className = lockClass ? lockClass : \"lock\";\r\n        let pagePosition;\r\n\r\n        if (body.classList.contains(className)) {\r\n            pagePosition = parseInt(document.body.dataset.position, 10);\r\n            body.dataset.position = pagePosition;\r\n            body.style.top = -pagePosition + 'px';\r\n        } else {\r\n            pagePosition = window.scrollY;\r\n            body.style.top = 'auto';\r\n            window.scroll({ top: pagePosition, left: 0 });\r\n            document.body.removeAttribute('data-position');\r\n        }\r\n\r\n        let lockPaddingValue = body.classList.contains(className)\r\n            ? \"0px\"\r\n            : window.innerWidth -\r\n            document.querySelector(\".wrapper\").offsetWidth +\r\n            \"px\";\r\n\r\n        body.style.paddingRight = lockPaddingValue;\r\n        body.classList.toggle(className);\r\n\r\n    }\r\n\r\n    // sliders\r\n\r\n    if (document.querySelector('.promo__slider')) {\r\n        new Swiper('.promo__slider', {\r\n            slidesPerView: 1,\r\n            speed: 800,\r\n            loop: true,\r\n            autoplay: {\r\n                delay: 8000,\r\n                stopOnLastSlide: false,\r\n            },\r\n            effect: \"fade\",\r\n            fadeEffect: {\r\n                crossFade: true\r\n            },\r\n            navigation: {\r\n                prevEl: '.promo__controls-prev',\r\n                nextEl: '.promo__controls-next'\r\n            },\r\n            on: {\r\n                init: (swiper) => {\r\n                    const nextEl = swiper.navigation.nextEl;\r\n                    let speed = swiper.params.speed;\r\n                    let autoplaySpeed = swiper.params.autoplay.delay;\r\n                    nextEl.style.setProperty('--counting-speed', ((speed + autoplaySpeed) / 1000) + 's');\r\n                    nextEl.classList.add('counting');\r\n                },\r\n                slideChangeTransitionStart: (swiper) => {\r\n                    const nextEl = swiper.navigation.nextEl;\r\n                    nextEl.classList.remove('counting');\r\n                    void nextEl.offsetWidth;\r\n                    nextEl.classList.add('counting');\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    if (document.querySelectorAll('.project').length > 0) {\r\n        document.querySelectorAll('.project').forEach(project => {\r\n\r\n            const mainSliderEl = project.querySelector('.project__slider');\r\n            const thumbsSliderEl = project.querySelector('.project__thumbs');\r\n            const prevBtn = project.querySelector('.project__controls-prev');\r\n            const nextBtn = project.querySelector('.project__controls-next')\r\n\r\n\r\n            const thumbsSlider = new Swiper(thumbsSliderEl, {\r\n                spaceBetween: 5,\r\n                slidesPerView: 3,\r\n                freeMode: true,\r\n                loop: true,\r\n                watchSlidesProgress: true,\r\n                breakpoints: {\r\n                    1023.98: {\r\n                        slidesPerView: \"auto\",\r\n                    }\r\n                }\r\n\r\n            });\r\n\r\n            const mainSlider = new Swiper(mainSliderEl, {\r\n                spaceBetween: 10,\r\n                loop: true,\r\n                effect: \"fade\",\r\n                fadeEffect: {\r\n                    crossFade: true\r\n                },\r\n                autoplay: {\r\n                    delay: 8000,\r\n                    stopOnLastSlide: false,\r\n                },\r\n                navigation: {\r\n                    nextEl: nextBtn,\r\n                    prevEl: prevBtn,\r\n                },\r\n                thumbs: {\r\n                    swiper: thumbsSlider\r\n                },\r\n                on: {\r\n                    init: (swiper) => {\r\n                        const nextEl = swiper.navigation.nextEl;\r\n                        let speed = swiper.params.speed;\r\n                        let autoplaySpeed = swiper.params.autoplay.delay;\r\n                        nextEl.style.setProperty('--counting-speed', ((speed + autoplaySpeed) / 1000) + 's');\r\n                        nextEl.classList.add('counting');\r\n                    },\r\n                    slideChangeTransitionStart: (swiper) => {\r\n                        const nextEl = swiper.navigation.nextEl;\r\n                        nextEl.classList.remove('counting');\r\n                        void nextEl.offsetWidth;\r\n                        nextEl.classList.add('counting');\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    if (document.querySelectorAll('.prices__cases')) {\r\n        new Swiper('.prices__cases', {\r\n            slidesPerView: \"auto\",\r\n            spaceBetween: 16,\r\n        })\r\n    }\r\n\r\n    if (document.querySelectorAll('.filters').length > 0) {\r\n        document.querySelectorAll('.filters').forEach(filter => {\r\n            new Swiper(filter, {\r\n                slidesPerView: \"auto\",\r\n            })\r\n        });\r\n    }\r\n\r\n    if (document.querySelector('.reviews__slider')) {\r\n        new Swiper('.reviews__slider', {\r\n            slidesPerView: 1,\r\n            speed: 800,\r\n            loop: true,\r\n            autoplay: {\r\n                delay: 8000,\r\n                stopOnLastSlide: false,\r\n            },\r\n            navigation: {\r\n                prevEl: '.reviews__prev',\r\n                nextEl: '.reviews__next'\r\n            },\r\n            on: {\r\n                init: (swiper) => {\r\n                    const nextEl = swiper.navigation.nextEl;\r\n                    let speed = swiper.params.speed;\r\n                    let autoplaySpeed = swiper.params.autoplay.delay;\r\n                    nextEl.style.setProperty('--counting-speed', ((speed + autoplaySpeed) / 1000) + 's');\r\n                    nextEl.classList.add('counting');\r\n                },\r\n                slideChangeTransitionStart: (swiper) => {\r\n                    const nextEl = swiper.navigation.nextEl;\r\n                    nextEl.classList.remove('counting');\r\n                    void nextEl.offsetWidth;\r\n                    nextEl.classList.add('counting');\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    if (document.querySelector('.service__slider')) {\r\n        new Swiper('.service__slider', {\r\n            slidesPerView: 1,\r\n            speed: 800,\r\n            loop: true,\r\n            autoplay: {\r\n                delay: 8000,\r\n                stopOnLastSlide: false,\r\n            },\r\n            navigation: {\r\n                prevEl: '.service__prev',\r\n                nextEl: '.service__next'\r\n            },\r\n            on: {\r\n                init: (swiper) => {\r\n                    const nextEl = swiper.navigation.nextEl;\r\n                    let speed = swiper.params.speed;\r\n                    let autoplaySpeed = swiper.params.autoplay.delay;\r\n                    nextEl.style.setProperty('--counting-speed', ((speed + autoplaySpeed) / 1000) + 's');\r\n                    nextEl.classList.add('counting');\r\n                },\r\n                slideChangeTransitionStart: (swiper) => {\r\n                    const nextEl = swiper.navigation.nextEl;\r\n                    nextEl.classList.remove('counting');\r\n                    void nextEl.offsetWidth;\r\n                    nextEl.classList.add('counting');\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    if (document.querySelector('.options__slider')) {\r\n        getMobileSlider('.options__slider', {\r\n            slidesPerView: \"auto\",\r\n            spaceBetween: 16\r\n        })\r\n    }\r\n\r\n    if (document.querySelector('.portfolio__slider')) {\r\n        new Swiper('.portfolio__slider', {\r\n            slidesPerView: 3,\r\n            spaceBetween: 24\r\n        })\r\n    }\r\n\r\n    if (document.querySelector('.blog__slider')) {\r\n        new Swiper('.blog__slider', {\r\n            spaceBetween: 16,\r\n            loop: true, slidesPerView: 1.15,\r\n            autoplay: {\r\n                delay: 8000,\r\n                stopOnLastSlide: false,\r\n            },\r\n            navigation: {\r\n                nextEl: '.blog__slider-next',\r\n                prevEl: '.blog__slider-prev'\r\n            },\r\n            breakpoints: {\r\n\r\n                768: {\r\n                    slidesPerView: 2,\r\n                },\r\n                1279.98: {\r\n                    slidesPerView: 3,\r\n                },\r\n                1439.98: {\r\n                    slidesPerView: 4,\r\n                }\r\n            },\r\n            on: {\r\n                init: (swiper) => {\r\n                    const nextEl = swiper.navigation.nextEl;\r\n                    let speed = swiper.params.speed;\r\n                    let autoplaySpeed = swiper.params.autoplay.delay;\r\n                    nextEl.style.setProperty('--counting-speed', ((speed + autoplaySpeed) / 1000) + 's');\r\n                    nextEl.classList.add('counting');\r\n                },\r\n                slideChangeTransitionStart: (swiper) => {\r\n                    const nextEl = swiper.navigation.nextEl;\r\n                    nextEl.classList.remove('counting');\r\n                    void nextEl.offsetWidth;\r\n                    nextEl.classList.add('counting');\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    if (document.querySelector('.team__slider')) {\r\n        new Swiper('.team__slider', {\r\n            spaceBetween: 24,\r\n            slidesPerView: \"auto\",\r\n            navigation: {\r\n                nextEl: '.team__slider-next',\r\n                prevEl: '.team__slider-prev'\r\n            },\r\n            breakpoints: {\r\n                767.98: {\r\n                    slidesPerView: 2,\r\n                },\r\n                1279.98: {\r\n                    slidesPerView: 3,\r\n                }\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n\r\n    function getMobileSlider(sliderName, options) {\r\n\r\n        let init = false;\r\n        let swiper = null;\r\n\r\n        function getSwiper() {\r\n            if (window.innerWidth <= 1023.98) {\r\n                if (!init) {\r\n                    init = true;\r\n                    swiper = new Swiper(sliderName, options);\r\n                }\r\n            } else if (init) {\r\n                swiper.destroy();\r\n                swiper = null;\r\n                init = false;\r\n            }\r\n        }\r\n        getSwiper();\r\n        window.addEventListener(\"resize\", getSwiper);\r\n    }\r\n\r\n\r\n    // range input\r\n    document.querySelectorAll('.range__input')?.forEach(sliderInput => {\r\n\r\n        const outputElement = sliderInput.closest('.range')?.querySelector('.range__output');\r\n\r\n\r\n        const minValue = +sliderInput.min || 0;\r\n        const maxValue = +sliderInput.max || 100;\r\n\r\n        const updateSlider = () => {\r\n\r\n            const percent = Math.round(100 * (+sliderInput.value - minValue) / (maxValue - minValue));\r\n            sliderInput.style.setProperty('--precent', `${percent}%`);\r\n\r\n\r\n            if (outputElement) {\r\n                outputElement.textContent = `${sliderInput.value}`;\r\n            }\r\n        }\r\n\r\n        sliderInput.addEventListener('input', () => {\r\n            updateSlider();\r\n        });\r\n\r\n        updateSlider();\r\n    })\r\n\r\n\r\n    // quiz\r\n    if (document.querySelector('.quiz')) {\r\n        const quizForm = document.querySelector('.quiz__form');\r\n        const quizSteps = document.querySelectorAll('.quiz__step');\r\n        const progressBar = document.querySelector('.quiz__progress-bar');\r\n        const progressPercent = document.querySelector('.quiz__progress-precent');\r\n        const areaRangeInput = document.querySelector('.range__input[name=\"area\"]');\r\n        const areaOutput = document.querySelector('.range__output');\r\n\r\n        let currentStep = 0;\r\n\r\n        if (areaRangeInput && areaOutput) {\r\n            areaOutput.textContent = areaRangeInput.value;\r\n        }\r\n\r\n        const updateProgress = () => {\r\n            const totalSteps = quizSteps.length - 1;\r\n            const completedSteps = currentStep;\r\n            const progressValue = (completedSteps / totalSteps) * 100;\r\n            progressBar.value = progressValue;\r\n            progressPercent.textContent = `${Math.round(progressValue)}%`;\r\n        };\r\n\r\n        const showStep = (stepIndex) => {\r\n            quizSteps.forEach((step, index) => {\r\n                if (index === stepIndex) {\r\n                    step.classList.add('active');\r\n                } else {\r\n                    step.classList.remove('active');\r\n                }\r\n            });\r\n            currentStep = stepIndex;\r\n            updateProgress();\r\n        };\r\n\r\n        quizForm.querySelectorAll('[data-next-step]').forEach(button => {\r\n            button.addEventListener('click', () => {\r\n                if (currentStep === 0) {\r\n                    const selectedRate = quizForm.querySelector('input[name=\"rate\"]:checked');\r\n                    if (!selectedRate) {\r\n                        alert('Пожалуйста, выберите тариф.');\r\n                        return;\r\n                    }\r\n                } else if (currentStep === 1) {\r\n                    const selectedRooms = quizForm.querySelectorAll('input[name=\"room_type\"]:checked');\r\n                    if (selectedRooms.length === 0) {\r\n                        alert('Пожалуйста, выберите хотя бы одно помещение.');\r\n                        return;\r\n                    }\r\n                } else if (currentStep === 2) {\r\n                    const selectedStyle = quizForm.querySelector('input[name=\"interior_style\"]:checked');\r\n                    if (!selectedStyle) {\r\n                        alert('Пожалуйста, выберите стиль интерьера.');\r\n                        return;\r\n                    }\r\n                } else if (currentStep === 3) {\r\n                    const phoneInput = document.getElementById('quiz-phone');\r\n                    if (!phoneInput.value.trim()) {\r\n                        alert('Пожалуйста, введите ваш номер телефона.');\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                if (currentStep < quizSteps.length - 1) {\r\n                    showStep(currentStep + 1);\r\n                }\r\n            });\r\n        });\r\n\r\n        quizForm.querySelectorAll('[data-prev-step]').forEach(button => {\r\n            button.addEventListener('click', () => {\r\n                if (currentStep > 0) {\r\n                    showStep(currentStep - 1);\r\n                }\r\n            });\r\n        });\r\n\r\n        if (areaRangeInput && areaOutput) {\r\n            areaRangeInput.addEventListener('input', () => {\r\n                areaOutput.textContent = areaRangeInput.value;\r\n            });\r\n        }\r\n\r\n        // Эмитация отправки формы\r\n        quizForm.addEventListener('submit', (event) => {\r\n            event.preventDefault();\r\n\r\n            const formData = new FormData(quizForm);\r\n            const data = {};\r\n            for (let [key, value] of formData.entries()) {\r\n                if (key === 'room_type') {\r\n                    if (!data[key]) {\r\n                        data[key] = [];\r\n                    }\r\n                    data[key].push(value);\r\n                } else {\r\n                    data[key] = value;\r\n                }\r\n            }\r\n            console.log('Quiz data submitted:', data);\r\n\r\n            setTimeout(() => {\r\n                showStep(quizSteps.length - 1);\r\n                quizForm.reset();\r\n                progressBar.value = 100;\r\n                progressPercent.textContent = '100%';\r\n            }, 500);\r\n        });\r\n\r\n        showStep(0);\r\n    }\r\n\r\n\r\n});\r\n\r\n\r\nif (typeof Fancybox !== \"undefined\" && Fancybox !== null) {\r\n    Fancybox.bind(\"[data-fancybox]\", {\r\n        dragToClose: false,\r\n        closeButton: false\r\n    });\r\n}\r\n\r\n\r\nHTMLElement.prototype.slideToggle = function (duration, callback) {\r\n    if (this.clientHeight === 0) {\r\n        _s(this, duration, callback, true);\r\n    } else {\r\n        _s(this, duration, callback);\r\n    }\r\n};\r\n\r\nHTMLElement.prototype.slideUp = function (duration, callback) {\r\n    _s(this, duration, callback);\r\n};\r\n\r\nHTMLElement.prototype.slideDown = function (duration, callback) {\r\n    _s(this, duration, callback, true);\r\n};\r\n\r\nfunction _s(el, duration, callback, isDown) {\r\n\r\n    if (typeof duration === 'undefined') duration = 400;\r\n    if (typeof isDown === 'undefined') isDown = false;\r\n\r\n    el.style.overflow = \"hidden\";\r\n    if (isDown) el.style.display = \"block\";\r\n\r\n    var elStyles = window.getComputedStyle(el);\r\n\r\n    var elHeight = parseFloat(elStyles.getPropertyValue('height'));\r\n    var elPaddingTop = parseFloat(elStyles.getPropertyValue('padding-top'));\r\n    var elPaddingBottom = parseFloat(elStyles.getPropertyValue('padding-bottom'));\r\n    var elMarginTop = parseFloat(elStyles.getPropertyValue('margin-top'));\r\n    var elMarginBottom = parseFloat(elStyles.getPropertyValue('margin-bottom'));\r\n\r\n    var stepHeight = elHeight / duration;\r\n    var stepPaddingTop = elPaddingTop / duration;\r\n    var stepPaddingBottom = elPaddingBottom / duration;\r\n    var stepMarginTop = elMarginTop / duration;\r\n    var stepMarginBottom = elMarginBottom / duration;\r\n\r\n    var start;\r\n\r\n    function step(timestamp) {\r\n\r\n        if (start === undefined) start = timestamp;\r\n\r\n        var elapsed = timestamp - start;\r\n\r\n        if (isDown) {\r\n            el.style.height = (stepHeight * elapsed) + \"px\";\r\n            el.style.paddingTop = (stepPaddingTop * elapsed) + \"px\";\r\n            el.style.paddingBottom = (stepPaddingBottom * elapsed) + \"px\";\r\n            el.style.marginTop = (stepMarginTop * elapsed) + \"px\";\r\n            el.style.marginBottom = (stepMarginBottom * elapsed) + \"px\";\r\n        } else {\r\n            el.style.height = elHeight - (stepHeight * elapsed) + \"px\";\r\n            el.style.paddingTop = elPaddingTop - (stepPaddingTop * elapsed) + \"px\";\r\n            el.style.paddingBottom = elPaddingBottom - (stepPaddingBottom * elapsed) + \"px\";\r\n            el.style.marginTop = elMarginTop - (stepMarginTop * elapsed) + \"px\";\r\n            el.style.marginBottom = elMarginBottom - (stepMarginBottom * elapsed) + \"px\";\r\n        }\r\n\r\n        if (elapsed >= duration) {\r\n            el.style.height = \"\";\r\n            el.style.paddingTop = \"\";\r\n            el.style.paddingBottom = \"\";\r\n            el.style.marginTop = \"\";\r\n            el.style.marginBottom = \"\";\r\n            el.style.overflow = \"\";\r\n            if (!isDown) el.style.display = \"none\";\r\n            if (typeof callback === 'function') callback();\r\n        } else {\r\n            window.requestAnimationFrame(step);\r\n        }\r\n    }\r\n\r\n    window.requestAnimationFrame(step);\r\n}\n\n//# sourceURL=webpack://tlm-gulp/./src/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;